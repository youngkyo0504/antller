import Layout from "@components/Layouts/Layout";
import InOutTransitionContainer from "@components/Layouts/TransitionContainer";
import type { GetStaticPaths, GetStaticProps, NextPage } from "next";
import Head from "next/head";
import getWorks from "src/lib/mdxFiles";

import { MDXProvider } from "@mdx-js/react";
import { serialize } from "next-mdx-remote/serialize";
import { MDXRemote, MDXRemoteSerializeResult } from "next-mdx-remote";
import { ParsedUrlQuery } from "querystring";
import tw from "twin.macro";
import { Work } from "@types";
import Image from "next/image";

// const Container = tw.div`max-w-content mx-auto px-content mt-header`;
const Container = tw.div`max-w-[900px] mx-auto px-content mt-header`;
const Title = tw.p`text-6xl font-bold tracking-wider`;
const SubTitle = tw.p`text-xl pt-4 text-gray`;

interface WorkDetailProps {
  source: MDXRemoteSerializeResult<Record<string, unknown>>;
  frontMatter: Work["data"];
}

const components = {};
const WorkDetailPage: NextPage<WorkDetailProps> = ({ source, frontMatter }) => {
  return (
    <>
      <Head>
        <title>Work details</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <MDXProvider components={components}>
        <Layout>
          <InOutTransitionContainer>
            <Container>
              <Title>{frontMatter.title}</Title>
              <SubTitle>{frontMatter.subCategory}</SubTitle>
            </Container>
            <Image
              src={"/images/hanwoo-insight.png"}
              layout="responsive"
              width={1000}
              height={600}
            />
            <Container>
              <div tw="pb-12"></div>
              <section className="prose lg:prose-xl prose-img:rounded-xl ">
                <MDXRemote {...source} />
                <p>왜 안되지?</p>
              </section>
            </Container>
          </InOutTransitionContainer>
        </Layout>
      </MDXProvider>
    </>
  );
};

export default WorkDetailPage;

interface IParams extends ParsedUrlQuery {
  slug: string;
}

export const getStaticProps: GetStaticProps = async ({ params }) => {
  const works = getWorks();
  const { slug } = params as IParams;
  const work = works
    .filter((work) => work !== undefined)
    .find((work) => work?.data.id === slug);

  const source = work ? work.content : "not found";
  const frontMatter = work ? work.data : {};
  const mdxSource = await serialize(source);
  return { props: { source: mdxSource, frontMatter } };
};

export const getStaticPaths: GetStaticPaths = () => {
  const works = getWorks();
  return {
    paths: works.map((work) => {
      return {
        params: {
          slug: work?.slug,
        },
      };
    }),
    fallback: false,
  };
};
